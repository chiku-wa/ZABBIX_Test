# hostsに定義したグループ名を記載する
- name: Zabbixを構築するためのプレイブック
  hosts: zabbix_test

  # ===== プレイブックで使用する、各種設定値が定義されたYAMLファイルを読み込む
  vars_files:
    - ./ansible_settings.yml

  # ===== 各種変数を定義
  vars:
    # ----- Zabbix関連
    # [初期スキーマ/データ登録用スクリプトファイル関連]
    # スクリプトファイル名（拡張子なし）
    zabbix_initialize_script_filename: "server.sql"
    # 圧縮ファイルのパス
    zabbix_initialize_script_dir_arch: "/usr/share/zabbix/sql-scripts/mysql"
    zabbix_initialize_script_file_arch: "{{ zabbix_initialize_script_filename }}.gz"
    # スクリプトの解凍先
    zabbix_initialize_script_dir_unarch: "/tmp"

    # [Zabbixの設定ファイル]
    # サーバ設定ファイルのパス
    zabbix_conf_server_file_path: "/etc/zabbix/zabbix_server.conf"

    # ----- Selenium関連
    # Webドライバのダウンロードファイル名（圧縮状態）
    webdriver_file_name_for_archive: geckodriver-v{{ selenium.webdriver_version }}-linux-aarch64.tar.gz

    # Webドライバのダウンロードファイル名（解凍後）
    webdriver_file_name_for_unarchive: geckodriver

    # Seleniumのサービス名
    selenium_service_name: selenium

  # ===== リモートホストでsudoで実行するかどうか
  # sudoしない（root接続することが前提のため）
  become: false

  # ===== 実行するタスク（コマンド）を定義
  tasks:
    # ----- MySQL
    # [インストール、起動、自動起動設定]
    - name: MySQLをインストールする
      ansible.builtin.dnf:
        # バージョンを指定する
        name: mysql-server-8.0.36-1.el9_3
        # すでにインストール済みの場合はスキップする
        state: present
    - name: MySQLを起動し、自動起動設定を行う
      ansible.builtin.service:
        name: mysqld
        state: started # サービスを起動
        enabled: true # 自動起動設定を有効

    # [「mysql_secure_installation」に相当する処理を行う]
    - name: 前提となるパッケージを導入する（A MySQL module is required:〜Python 3.X mysqlclient or PyMySQL. エラー回避のため）
      ansible.builtin.dnf:
        name: python3-PyMySQL
        # すでにインストール済みの場合はスキップする
        state: present

    - name: 「root」ユーザのパスワードを設定する
      community.mysql.mysql_user:
        # パスワード認証なしでログインを試みる（初回はrootパスワードが設定されいないため）
        check_implicit_admin: true
        # コマンドを実行する際に接続するユーザ名、パスワード
        login_user: root
        login_password: "{{ mysql.accounts.root_user.password }}"
        # パスワードを変更したいユーザと、設定したいパスワード
        name: root
        password: "{{ mysql.accounts.root_user.password }}"
        # すでにパスワード変更済みの場合はプレイブックの処理はスキップする
        state: present
        # プレイブック実行時の警告回避のためのオプション
        column_case_sensitive: true

    - name: 匿名ユーザを削除する
      community.mysql.mysql_user:
        # コマンドを実行する際に接続するユーザ名、パスワード
        login_user: root
        login_password: "{{ mysql.accounts.root_user.password }}"
        # 全ホストで匿名ユーザを削除する（state: absentは）
        name: "" # 匿名ユーザ
        host_all: true # 全ホスト
        state: absent # ユーザ削除
        # プレイブック実行時の警告回避のためのオプション
        column_case_sensitive: true

    - name: テスト用データベースの削除
      community.mysql.mysql_db:
        # コマンドを実行する際に接続するユーザ名、パスワード
        login_user: root
        login_password: "{{ mysql.accounts.root_user.password }}"
        # 削除したいデータベース名
        name: test
        # 削除する
        state: absent

    # [DB、ユーザ作成を行う]
    - name: データベースの作成
      community.mysql.mysql_db:
        # コマンドを実行する際に接続するユーザ名、パスワード
        login_user: root
        login_password: "{{ mysql.accounts.root_user.password }}"
        # データベースを作成する
        name: "{{ mysql.database.name }}" # データベース名
        encoding: "{{ mysql.database.encoding }}" # データベースのエンコーディング
        state: present # すでにデータベースが存在している場合はスキップ

    - name: ユーザの作成
      community.mysql.mysql_user:
        # コマンドを実行する際に接続するユーザ名、パスワード
        login_user: root
        login_password: "{{ mysql.accounts.root_user.password }}"
        # ユーザを作成する
        name: "{{ mysql.accounts.zabbix.username }}"
        password: "{{ mysql.accounts.zabbix.password }}"
        # 下記コマンド相当の権限付与を行う
        # GRANT ALL PRIVILEGES ON <データベース>.* TO '<ユーザ名>'@'%';
        host: "%" # すべてのホストからのアクセスを許可
        priv: "{{ mysql.database.name }}.*:ALL" # 先ほど作成したデータベースへのすべての権限を付与
        state: present # すでにユーザが存在している場合はスキップ

    # [外部からMySQLに接続できるようにするための設定]
    - name: MySQL用のファイアウォール開放
      ansible.posix.firewalld:
        # ポートを開放する
        service: mysql
        # ポート開放を有効化する
        state: enabled
        # 設定を永続化する
        permanent: true
        # 即時反映する
        immediate: true

    - name: 設定ファイルにアクセスを許可するIP設定を追加する
      ansible.builtin.lineinfile:
        path: /etc/my.cnf.d/mysql-server.cnf
        # 「bind-address」設定がまだ存在しない場合は設定を追記し、存在する場合は置き換える
        regexp: '^bind-address\s*='
        line: "bind-address = 0.0.0.0"
        state: present # regexpで指定した行が存在する場合は置き換える
      # [ハンドラ呼び出し]設定ファイル変更後は、Ansibleのハンドラを呼び出してMySQLのサービス再起動を行う
      notify: MySQL再起動

    # ----- Zabbix関連
    #       原則として、下記インストール手順に則って定義することとする
    #       https://www.zabbix.com/jp/download?zabbix=7.2
    - name: Zabbixの公式リポジトリをインストールする
      ansible.builtin.dnf:
        # バージョン7.2を明示する
        name: "https://repo.zabbix.com/zabbix/7.2/release/rhel/9/noarch/zabbix-release-latest-7.2.el9.noarch.rpm"
        # すでにインストール済みの場合はスキップする
        state: present
        # Zabbixの公式サイトから引用したURLであり、信頼性は保証されているためGPG認証は不要とする
        # ※GPGを有効化した状態だと、通常のLinuxコンソールからdnfコマンドを実行する場合とは異なり、エラーが頻発して導入が滞るため
        disable_gpg_check: true

    - name: Zabbixの各種ソフトウェアをインストール
      ansible.builtin.dnf:
        name:
          - zabbix-server-mysql
          - zabbix-web-mysql
          - zabbix-apache-conf
          - zabbix-sql-scripts
          - zabbix-selinux-policy
          - zabbix-agent
        state: present

    # [MySQLのデータベース上に、Zabbixの用の初期スキーマ/データを作成する]
    - name: 「log_bin_trust_function_creators」を有効にする(Zabbixに同梱されている初期スキーマ/データ登録用スクリプトを実行するため)
      community.mysql.mysql_query:
        login_user: "root"
        login_password: "{{ mysql.accounts.root_user.password }}"
        query: "SET GLOBAL log_bin_trust_function_creators = 1;"

    # [Zabbixに同梱されている初期スキーマ/データ登録用スクリプトを実行する]
    - name: Zabbixに同梱されている初期スキーマ/データ登録用スクリプトの圧縮ファイルを解凍する
      ansible.builtin.shell:
        cmd: "gzip -dc {{ zabbix_initialize_script_dir_arch }}/{{ zabbix_initialize_script_file_arch }}\
               > {{ zabbix_initialize_script_dir_unarch }}/{{ zabbix_initialize_script_filename }}"
      # 解凍コマンドを実行しても冪等性が確保されているため、lintエラー回避のために下記を明記する。
      changed_when: false

    - name: 解凍したスクリプトをMySQLに取り込ませる
      community.mysql.mysql_db:
        login_user: "{{ mysql.accounts.zabbix.username }}"
        login_password: "{{ mysql.accounts.zabbix.password }}"
        name: "{{ mysql.database.name }}"
        state: import
        # 実行したいスクリプト（解凍したスクリプトのファイルパス）を指定する
        target: "{{ zabbix_initialize_script_dir_unarch }}/{{ zabbix_initialize_script_filename }}"

    - name: 「log_bin_trust_function_creators」を無効にする(元に戻す)
      community.mysql.mysql_query:
        login_user: "root"
        login_password: "{{ mysql.accounts.root_user.password }}"
        query: "SET GLOBAL log_bin_trust_function_creators = 0;"

    - name: 「zabbix_server.conf」をバックアップする
      ansible.builtin.copy:
        src: "{{ zabbix_conf_server_file_path }}"
        dest: "{{ zabbix_conf_server_file_path }}.bak"
        remote_src: true
        mode: '0644'

    - name: 「zabbix_server.conf」を修正し、Zabbixの設定ファイルに、DB接続に必要なパスワードを設定する
      ansible.builtin.lineinfile:
        path: /etc/zabbix/zabbix_server.conf
        # 既存のコメントアウトされている記述をコメントアウトし、パスワードを埋め込む
        regexp: '^#\s*DBPassword='
        line: "DBPassword={{ mysql.accounts.zabbix.password }}"
        state: present

    - name: Zabbixの設定ファイルを編集し、スクリプト実行を許可する（ping監視を使えるようにするため）
      ansible.builtin.lineinfile:
        path: /etc/zabbix/zabbix_server.conf
        # EnableGlobalScripts=0を1に変更する
        regexp: '^EnableGlobalScripts='
        line: 'EnableGlobalScripts=1'
        state: present

    - name: Zabbix関連のサービスを再起動し、自動起動設定を行う
      ansible.builtin.service:
        name: "{{ item }}"
        state: restarted
        enabled: true
      loop:
        - zabbix-server
        - zabbix-agent
        - httpd
        - php-fpm

    - name: Apache用のファイアウォール開放
      ansible.posix.firewalld:
        # ポートを開放する
        port: "{{ item }}/tcp"
        # ポート開放を有効化する
        state: enabled
        # 設定を永続化する
        permanent: true
        # 即時反映する
        immediate: true
      # 開放したいポート番号分だけ繰り返す（item変数に相当）
      loop:
        - 80
        - 443

    # ----- スタンドアローン版のSelenium導入、Zabbix設定
    # [前提となるパッケージの導入]
    - name: OpenJDKをインストールする
      ansible.builtin.dnf:
        # バージョンを指定する
        name: java-21-openjdk
        # すでにインストール済みの場合はスキップする
        state: present

    # [ディレクトリを作成し、Selenium本体とWebドライバをダウンロードする]
    - name: SeleniumとWebドライバダウンロード用のディレクトリが存在するかどうかを確認する
      ansible.builtin.stat:
        path: "{{ selenium.work_dir }}"
      # 存在チェックの結果を変数に格納する
      register: exists_stat_selenium_work_dir

    - name: ディレクトリが存在しない場合のみ、SeleniumとWebドライバダウンロード用のディレクトリを作成する
      ansible.builtin.file:
        path: "{{ selenium.work_dir }}"
        state: directory
        owner: root
        group: root
        mode: "755"
      # ディレクトリが存在しなければ作成する（前述のタスクで定義した変数を元に、既存ディレクトリの存在をチェック）
      when: not exists_stat_selenium_work_dir.stat.exists

    - name: Seleniumをダウンロードする
      ansible.builtin.get_url:
        url: "https://github.com/SeleniumHQ/selenium/releases/download/\
              selenium-{{ selenium.selenium_version }}/selenium-server-{{ selenium.selenium_version }}.jar"
        dest: "{{ selenium.work_dir }}"
        mode: "755"

    # ----- Webドライバの導入
    - name: Webドライバをダウンロード
      ansible.builtin.get_url:
        url: "https://github.com/mozilla/geckodriver/releases/download/\
              v{{ selenium.webdriver_version }}/{{ webdriver_file_name_for_archive }}"
        dest: "{{ selenium.work_dir }}"
        mode: "755"

    - name: ダウンロードしたWebドライバを解凍する
      ansible.builtin.unarchive:
        src: "{{ selenium.work_dir }}/{{ webdriver_file_name_for_archive }}"
        dest: "{{ selenium.work_dir }}/"
        remote_src: true

    - name: Webドライバを実行ディレクトリにコピーする
      ansible.builtin.copy:
        src: "{{ selenium.work_dir }}/{{ webdriver_file_name_for_unarchive }}"
        dest: "/usr/local/bin/{{ webdriver_file_name_for_unarchive }}"
        mode: "755"
        remote_src: true
      # ファイル移動で冪等性が確保されているため、lintエラー回避のために下記を明記する。
      changed_when: false

    # ----- Seleniumのsystemdユニットを作成し、自動起動設定を有効にする
    - name: Seleniumのsystemdユニットを作成する
      ansible.builtin.copy:
        dest: "/etc/systemd/system/{{ selenium_service_name }}.service"
        content: |
          [Unit]
          Description=Seleniumのスタンドアローン版の起動用ユニット
          # ネットワークの準備が整ったら起動する
          After=network.target

          [Service]
          WorkingDirectory={{ selenium.work_dir }}
          ExecStart=java -Dwebdriver.gecko.driver=/usr/local/bin/{{ webdriver_file_name_for_unarchive }} \
                   -jar selenium-server-{{ selenium.selenium_version }}.jar standalone
          # システムが異常終了しても再起動しない
          Restart=no

          [Install]
          WantedBy=multi-user.target
        mode: "644"

    - name: ユニットを有効化するために、systemdのデーモンを再起動する
      ansible.builtin.systemd:
        daemon_reload: true

    - name: Seleniumを自動起動する
      ansible.builtin.service:
        name: "{{ selenium_service_name }}"
        state: restarted # サービスを起動
        enabled: true # 自動起動設定を有効

    # ----- メール設定関連
    - name: SELinuxで2525ポートを許可する（Mailtrapで検証するため）
      community.general.seport:
        ports: 2525
        proto: tcp
        setype: smtp_port_t
        state: present

  # ===== ハンドラ（tasksから呼び出される各種コマンド）を定義
  handlers:
    # MySQLのサービスを再起動するハンドラ
    - name: MySQL再起動
      ansible.builtin.service:
        name: mysqld
        state: restarted
