- name: 構築済みのZabbixに監視設定を追加するプレイブック
  # hostsに定義したグループ名を記載する
  hosts: zabbix_test

  # ===== プレイブックで使用する、各種設定値が定義されたYAML設定ファイルを読み込む
  vars_files:
    # 機密情報保存用のansible-vaultファイルを先に読み込む
    # ※ansible_settings.ymlで、ansible-vaultの定義情報を読み込んでいるため
    - ./ansible_secrets.yml
    - ./ansible_settings.yml

  # ===== リモートホストでsudoで実行するかどうか
  # sudoしない（root接続することが前提のため）
  become: false

  # ===== 実行するタスク（コマンド）を定義
  tasks:
    # ==================================================================================================================================
    # ========== Zabbix APIを通じて、Snipe-ITにログインし、ログイン後に「ダッシュボード」が表示されることを確認する監視設定を作成する

    # ---------------------------------------------
    # ----- 監視対象ホスト作成
    - name: Zabbix APIでホスト作成：監視対象のSnipe-ITのホストを作成する
      ansible.builtin.uri:
        method: "GET"

        url: "{{ zabbix.api_common.api_url }}"
        headers:
          Content-Type: "{{ zabbix.api_common.api_header_content_type }}"
          Authorization: "{{ zabbix.api_common.api_header_authorization }}"
        body_format: "{{ zabbix.api_common.api_header_body_format }}"

        body:
          jsonrpc: "{{ zabbix.api_common.api_jsonrpc }}"
          method: "host.create"
          id: "{{ zabbix.api_common.api_id }}"

          params:
            # ホスト
            host: "{{ zabbix.target_host.host }}"
            # 表示名
            name: "{{ zabbix.target_host.name }}"
            # ホストグループ
            groups: "{{ zabbix.target_host.groups }}"
            # インタフェース
            interfaces: "{{ zabbix.target_host.interfaces }}"
            # マクロ変数として、監視対象のSnipe-ITのユーザ名、パスワードを設定する
            macros:
              # ユーザ名はプレーンテキスト（type=0）で定義
              - macro: "{{ secrets.zabbix.target_host.macros.username.macro }}"
                value: "{{ secrets.zabbix.target_host.macros.username.value }}"
                type: "0"
              # パスワードは非表示（type=1）で定義
              - macro: "{{ secrets.zabbix.target_host.macros.password.macro }}"
                value: "{{ secrets.zabbix.target_host.macros.password.value }}"
                type: "1"

      # レスポンスを変数に格納する
      register: result_zabbix_api_for_create_host

      # レスポンスに以下のJSON構造でエラーを示す要素が含まれている場合はエラーとする
      # ※Ansibleでは、HTTPステータスコード=200だと失敗にならないため、明示的にエラーを発生させる
      # --------------------------------
      #   "json": {
      #     "error": {
      # --------------------------------
      failed_when: "'error' in result_zabbix_api_for_create_host.json"

    # ホスト情報をZabbix APIで取得して変数に格納する
    # ※アイテムやトリガー作成で使用するため。ホスト作成時のレスポンス情報には、ID情報しか含まれないため、host.getで再取得する
    - name: Zabbix APIでホスト作成：作成したホストの情報を取得してレスポンス結果を変数に格納
      ansible.builtin.uri:
        method: "GET"

        url: "{{ zabbix.api_common.api_url }}"
        headers:
          Content-Type: "{{ zabbix.api_common.api_header_content_type }}"
          Authorization: "{{ zabbix.api_common.api_header_authorization }}"
        body_format: "{{ zabbix.api_common.api_header_body_format }}"

        body:
          jsonrpc: "{{ zabbix.api_common.api_jsonrpc }}"
          method: "host.get"
          id: "{{ zabbix.api_common.api_id }}"

          params:
            output: "extend"
            # 情報を取得したいホストのID
            # ※先ほどの処理で作成したホストのIDを指定する
            # ※登録件数が1件でもレスポンスは配列として返ってくるため、[0]で明示的に1要素目を取得する
            hostids: "{{ result_zabbix_api_for_create_host.json.result.hostids[0] }}"

      # レスポンスを変数に格納する
      register: created_host_raw

      # レスポンスに以下のJSON構造でエラーを示す要素が含まれている場合はエラーとする
      # ※Ansibleでは、HTTPステータスコード=200だと失敗にならないため、明示的にエラーを発生させる
      # --------------------------------
      #   "json": {
      #     "error": {
      # --------------------------------
      failed_when: "'error' in created_host_raw.json"

    - name: Zabbix APIでホスト作成：変数に格納したレスポンス結果を加工し、ホスト情報のみを抜き出して変数に格納し直す
      # 本プレイブックは、単一のホストを作成することを前提としているため、host.getのレスポンス結果で、0要素目を取得して変数に格納する
      # --------------------------------
      # "result": [
      # {
      #   "hostid": "10702",
      #   "proxyid": "0",
      #   "host": "snipe-it-test3",
      # ...
      # --------------------------------
      ansible.builtin.set_fact:
        created_host: "{{ created_host_raw.json.result[0] }}"

    # ---------------------------------------------
    # ----- アイテム作成
    - name: Zabbix APIでアイテム作成：Seleniumを用いた監視用スクリプトを定義する
      ansible.builtin.uri:
        method: "GET"

        url: "{{ zabbix.api_common.api_url }}"
        headers:
          Content-Type: "{{ zabbix.api_common.api_header_content_type }}"
          Authorization: "{{ zabbix.api_common.api_header_authorization }}"
        body_format: "{{ zabbix.api_common.api_header_body_format }}"

        body:
          jsonrpc: "{{ zabbix.api_common.api_jsonrpc }}"
          method: "item.create"
          id: "{{ zabbix.api_common.api_id }}"

          params:
            # 紐づけたいホストのID
            hostid: "{{ created_host.hostid }}"
            # 名前
            name: "{{ zabbix.host_item.name }}"
            # タイプ（ブラウザは「22」）
            type: "{{ zabbix.host_item.type }}"
            # キー
            key_: "{{ zabbix.host_item.key_ }}"
            # データ方（テキストは「4」）
            value_type: "{{ zabbix.host_item.value_type }}"
            # 実行させたいSeleniumスクリプト
            params: "{{ zabbix.host_item.params }}"
            # 監視間隔
            delay: "{{ zabbix.host_item.delay }}"
            # タイムアウト（デフォルト設定を用いるため、指定しない）
            # "timeout": "{{ XXX }}",
            # ヒストリの保存期間
            history: "{{ zabbix.host_item.history }}"

      # レスポンスを変数に格納する
      register: result_zabbix_api_for_create_item

      # レスポンスに以下のJSON構造でエラーを示す要素が含まれている場合はエラーとする
      # ※Ansibleでは、HTTPステータスコード=200だと失敗にならないため、明示的にエラーを発生させる
      # --------------------------------
      #   "json": {
      #     "error": {
      # --------------------------------
      failed_when: "'error' in result_zabbix_api_for_create_item.json"

    # アイテム情報をZabbix APIで取得して変数に格納する
    # ※トリガー作成で使用するため。ホスト作成時のレスポンス情報には、ID情報しか含まれないため、host.getで再取得する
    - name: Zabbix APIでアイテム作成：作成したアイテムの情報を取得してレスポンス結果を変数に格納
      ansible.builtin.uri:
        method: "GET"

        url: "{{ zabbix.api_common.api_url }}"
        headers:
          Content-Type: "{{ zabbix.api_common.api_header_content_type }}"
          Authorization: "{{ zabbix.api_common.api_header_authorization }}"
        body_format: "{{ zabbix.api_common.api_header_body_format }}"

        body:
          jsonrpc: "{{ zabbix.api_common.api_jsonrpc }}"
          method: "item.get"
          id: "{{ zabbix.api_common.api_id }}"

          params:
            output: "extend"
            # 情報を取得したいアイテムのID
            # ※先ほどの処理で作成したアイテムのIDを指定する
            # ※登録件数が1件でもレスポンスは配列として返ってくるため、[0]で明示的に1要素目を取得する
            itemids: "{{ result_zabbix_api_for_create_item.json.result.itemids[0] }}"

      # レスポンスを変数に格納する
      register: created_item_raw

      # レスポンスに以下のJSON構造でエラーを示す要素が含まれている場合はエラーとする
      # ※Ansibleでは、HTTPステータスコード=200だと失敗にならないため、明示的にエラーを発生させる
      # --------------------------------
      #   "json": {
      #     "error": {
      # --------------------------------
      failed_when: "'error' in created_item_raw.json"

    - name: Zabbix APIでアイテム作成：変数に格納したレスポンス結果を加工し、アイテム情報のみを抜き出して変数に格納し直す
      # 本プレイブックは、単一のホストを作成することを前提としているため、host.getのレスポンス結果で、0要素目を取得して変数に格納する
      # --------------------------------
      # "result": [
      # {
      #   "hostid": "10702",
      #   "proxyid": "0",
      #   "host": "snipe-it-test3",
      # ...
      # --------------------------------
      ansible.builtin.set_fact:
        created_item: "{{ created_item_raw.json.result[0] }}"

    # ---------------------------------------------
    # ----- ダッシュボード画面が表示されているかどうかの判定に使用する、正規表現を作成
    - name: Zabbix APIで正規表現作成：ダッシュボード画面の表示判定用の正規表現文字列を定義する
      ansible.builtin.uri:
        method: "GET"

        url: "{{ zabbix.api_common.api_url }}"
        headers:
          Content-Type: "{{ zabbix.api_common.api_header_content_type }}"
          Authorization: "{{ zabbix.api_common.api_header_authorization }}"
        body_format: "{{ zabbix.api_common.api_header_body_format }}"

        body:
          jsonrpc: "{{ zabbix.api_common.api_jsonrpc }}"
          method: "regexp.create"
          id: "{{ zabbix.api_common.api_id }}"

          params:
            name: "{{ zabbix.regex.name }}"
            expressions: "{{ zabbix.regex.expressions }}"

      # レスポンスを変数に格納する
      register: result_zabbix_api_for_regex

      # レスポンスに以下のJSON構造でエラーを示す要素が含まれている場合はエラーとする
      # ※Ansibleでは、HTTPステータスコード=200だと失敗にならないため、明示的にエラーを発生させる
      # --------------------------------
      #   "json": {
      #     "error": {
      # --------------------------------
      failed_when: "'error' in result_zabbix_api_for_regex.json"

    # 正規表現情報をZabbix APIで取得して変数に格納する
    # ※トリガー作成で使用するため。正規表現作成時のレスポンス情報には、ID情報しか含まれないため、regexp.getで再取得する
    - name: Zabbix APIで正規表現作成：作成した正規表現の各種情報を取得して変数に格納
      ansible.builtin.uri:
        method: "GET"

        url: "{{ zabbix.api_common.api_url }}"
        headers:
          Content-Type: "{{ zabbix.api_common.api_header_content_type }}"
          Authorization: "{{ zabbix.api_common.api_header_authorization }}"
        body_format: "{{ zabbix.api_common.api_header_body_format }}"

        body:
          jsonrpc: "{{ zabbix.api_common.api_jsonrpc }}"
          method: "regexp.get"
          id: "{{ zabbix.api_common.api_id }}"

          params:
            output: "extend"
            # 情報を取得したい正規表現のID
            # ※先ほどの処理で作成した正規表現のIDを指定する
            # ※登録件数が1件でもレスポンスは配列として返ってくるため、[0]で明示的に1要素目を取得する
            regexpids: "{{ result_zabbix_api_for_regex.json.result.regexpids[0] }}"

      # レスポンスを変数に格納する
      register: created_regexp_raw

      # レスポンスに以下のJSON構造でエラーを示す要素が含まれている場合はエラーとする
      # ※Ansibleでは、HTTPステータスコード=200だと失敗にならないため、明示的にエラーを発生させる
      # --------------------------------
      #   "json": {
      #     "error": {
      # --------------------------------
      failed_when: "'error' in created_regexp_raw.json"

    - name: Zabbix APIで正規表現作成：変数に格納したレスポンス結果を加工し、正規表現情報のみを抜き出して変数に格納し直す
      # 本プレイブックは、単一のホストを作成することを前提としているため、host.getのレスポンス結果で、0要素目を取得して変数に格納する
      # --------------------------------
      # "result": [
      #     {
      #       "regexpid": "16",
      #       "name": "XXXX",
      #       "test_string": ""
      # ...
      # --------------------------------
      ansible.builtin.set_fact:
        created_regexp: "{{ created_regexp_raw.json.result[0] }}"

    - name: "デバッグ"
      ansible.builtin.debug:
        msg: 'find(/{{ created_host.host }}/{{ created_item.name }},,"regexp","@{{ created_regexp.name }}")=0'

    # ---------------------------------------------
    # ----- トリガー作成
    - name: Zabbix APIでトリガーを作成：作成したアイテムに「ダッシュボード」が含まれない場合に警告を発するトリガーを作成する
      ansible.builtin.uri:
        method: "POST"

        url: "{{ zabbix.api_common.api_url }}"
        headers:
          Content-Type: "{{ zabbix.api_common.api_header_content_type }}"
          Authorization: "{{ zabbix.api_common.api_header_authorization }}"
        body_format: "{{ zabbix.api_common.api_header_body_format }}"

        body:
          jsonrpc: "{{ zabbix.api_common.api_jsonrpc }}"
          method: "trigger.create"
          id: "{{ zabbix.api_common.api_id }}"

          params:
            description: "アイテム（Selenium）で取得したHTML内に、指定した正規表現文字列が含まれていなければアラートを発報するトリガー。"

            # 深刻度に「警告(2)」を設定する
            priority: 2

            # 本設定ファイルで定義した情報を下に、アイテム（Selenium）で取得したHTMLに、
            # 正規表現文字列が含まれているかどうかを判定するトリガーを作成する
            # 構文：
            # find(/＜ホスト名＞/＜アイテムのキー名＞,,\"regexp\",\"@＜正規表現名＞\")=0
            expression: 'find(/{{ created_host.host }}/{{ created_item.key_ }},,"regexp","@{{ created_regexp.name }}")=0'

            # 有効化（「0」を指定）する
            status: 0

      # レスポンスを変数に格納する
      register: result_zabbix_api_for_trigger

      # レスポンスに以下のJSON構造でエラーを示す要素が含まれている場合はエラーとする
      # ※Ansibleでは、HTTPステータスコード=200だと失敗にならないため、明示的にエラーを発生させる
      # --------------------------------
      #   "json": {
      #     "error": {
      # --------------------------------
      failed_when: "'error' in result_zabbix_api_for_trigger.json"
