# hostsに定義したグループ名を記載する
- name: Zabbixを構築するためのプレイブック
  hosts: zabbix-test

  # ===== プレイブックで使用する、各種アカウントのユーザ名、パスワードが定義されたYAMLファイルを読み込む
  vars_files:
    - ./ansible_settings.yml

  # ===== リモートホストでsudoで実行するかどうか
  # sudoしない（root接続することが前提のため）
  become: false

  # ===== 実行するタスク（コマンド）を定義
  tasks:
    # ----- MySQL
    # [インストール、起動、自動起動設定]
    - name: MySQLをインストールする
      ansible.builtin.dnf:
        # バージョンを指定する
        name: mysql-server-8.0.36-1.el9_3
        # すでにインストール済みの場合はスキップする
        state: present
    - name: MySQLを起動し、自動起動設定を行う
      ansible.builtin.service:
        name: mysqld
        state: started # サービスを起動
        enabled: true # 自動起動設定を有効

    # [「mysql_secure_installation」に相当する処理を行う]
    - name: 前提となるパッケージを導入する（A MySQL module is required:〜Python 3.X mysqlclient or PyMySQL. エラー回避のため）
      ansible.builtin.dnf:
        name: python3-PyMySQL
        # すでにインストール済みの場合はスキップする
        state: present

    - name: 「root」ユーザのパスワードを設定する
      community.mysql.mysql_user:
        # パスワード認証なしでログインを試みる（初回はrootパスワードが設定されいないため）
        check_implicit_admin: true
        # コマンドを実行する際に接続するユーザ名、パスワード
        login_user: root
        login_password: "{{ mysql.accounts.root_user.password }}"
        # パスワードを変更したいユーザと、設定したいパスワード
        name: root
        password: "{{ mysql.accounts.root_user.password }}"
        # すでにパスワード変更済みの場合はプレイブックの処理はスキップする
        state: present

    - name: 匿名ユーザを削除する
      community.mysql.mysql_user:
        # コマンドを実行する際に接続するユーザ名、パスワード
        login_user: root
        login_password: "{{ mysql.accounts.root_user.password }}"
        # 全ホストで匿名ユーザを削除する（state: absentは）
        name: "" # 匿名ユーザ
        host_all: true # 全ホスト
        state: absent # ユーザ削除

    - name: テスト用データベースの削除
      community.mysql.mysql_db:
        # コマンドを実行する際に接続するユーザ名、パスワード
        login_user: root
        login_password: "{{ mysql.accounts.root_user.password }}"
        # 削除したいデータベース名
        name: test
        # 削除する
        state: absent

    # [DB、ユーザ作成を行う]
    - name: データベースの作成
      community.mysql.mysql_db:
        # コマンドを実行する際に接続するユーザ名、パスワード
        login_user: root
        login_password: "{{ mysql.accounts.root_user.password }}"
        # データベースを作成する
        name: "{{ mysql.database.name }}" # データベース名
        encoding: "{{ mysql.database.encoding }}" # データベースのエンコーディング
        state: present # すでにデータベースが存在している場合はスキップ

    - name: ユーザの作成
      community.mysql.mysql_user:
        # コマンドを実行する際に接続するユーザ名、パスワード
        login_user: root
        login_password: "{{ mysql.accounts.root_user.password }}"
        # ユーザを作成する
        name: "{{ mysql.accounts.zabbix.username }}"
        password: "{{ mysql.accounts.zabbix.password }}"
        # 下記コマンド相当の権限付与を行う
        # GRANT ALL PRIVILEGES ON <データベース>.* TO '<ユーザ名>'@'%';
        host: "%" # すべてのホストからのアクセスを許可
        priv: "{{ mysql.database.name }}.*:ALL" # 先ほど作成したデータベースへのすべての権限を付与
        state: present # すでにユーザが存在している場合はスキップ

    # [外部からMySQLに接続できるようにするための設定]
    - name: MySQL用のファイアウォール開放
      ansible.posix.firewalld:
        # ポートを開放する
        service: mysql
        # ポート開放を有効化する
        state: enabled
        # 設定を永続化する
        permanent: true
        # 即時反映する
        immediate: true

    - name: 設定ファイルにアクセスを許可するIP設定を追加する
      ansible.builtin.lineinfile:
        path: /etc/my.cnf.d/mysql-server.cnf
        # 「bind-address」設定がまだ存在しない場合は設定を追記し、存在する場合は置き換える
        regexp: '^bind-address\s*='
        line: "bind-address = 0.0.0.0"
        state: present # regexpで指定した行が存在する場合は置き換える
      # [ハンドラ呼び出し]設定ファイル変更後は、Ansibleのハンドラを呼び出してMySQLのサービス再起動を行う
      notify: MySQL再起動

    # ----- Zabbix関連
    #       原則として、下記インストール手順に則って定義することとする
    #       https://www.zabbix.com/jp/download?zabbix=7.2
    # [GPGキーの導入と、リポジトリインストール]
    - name: Zabbixの公式リポジトリをインストールする
      ansible.builtin.dnf:
        # バージョン7.2を明示する
        name: "https://repo.zabbix.com/zabbix/7.2/release/rhel/9/noarch/zabbix-release-latest-7.2.el9.noarch.rpm"
        # すでにインストール済みの場合はスキップする
        state: present
        # Zabbixの公式サイトから引用したURLであり、信頼性は保証されているためGPG認証は不要とする
        # ※GPGを有効化した状態だと、通常のLinuxコンソールからdnfコマンドを実行する場合とは異なり、エラーが頻発して導入が滞るため
        disable_gpg_check: true

  # ===== ハンドラ（tasksから呼び出される各種コマンド）を定義
  handlers:
    # MySQLのサービスを再起動するハンドラ
    - name: MySQL再起動
      ansible.builtin.service:
        name: mysqld
        state: restarted
